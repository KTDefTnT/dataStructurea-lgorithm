/**
 * 题目要求：
 *  1、输入:["12","+", "3"]
    输出:["12","3","+"]

    输入:["(","1","+","(","4","+","5","+","3",")","-","3",")","+","(","9","+","8",")"]=(1+(4+5+3)-3)
    输出:[ '1', '4', '5', '+', '3', '+', '+', '3', '-', '9', '8', '+', '+' ]

    输入:['(', '1', '+', '(', '4', '+', '5', '+', '3', ')', '/', '4', '-', '3', ')', '+', '(', '6', '+', '8', ')', '*', '3'] =(1+(4+5+3)/4-3+(6+8)*3)
    输出:['1', '4', '5', '+', '3', '+', '4', '/', '+', '3', '-', '6', '8', '+', '3', '*', '+']
 *
 * 思路：
 * 1、碰到左括号-> 将左括号压入符号栈中
 * 2、遇到数字 -> 将数字压入后缀表达式数组中
 * 3、遇到符号 -> 判断当前符号与栈顶符号的优先级，若栈顶符号优先级 >= 当前符号优先级，则弹出栈顶符号压入后缀表达式数组中
 * 4、遇到右括号 -> 逐一将符号栈中符号弹出 压入后缀表达式中，直到遇到左括号结束，弹出左括号
 */
const Stack = require('./index');
function infix_exp_2_postfix_exp(exp) {
  let postfix_list = []; // 后缀表达式结果
  let stack = new Stack(); // 字符表
  const EXP_LIST = ['+', '-', '*', '/'];
  // 符号优先级
  const EXP_GRADE = {
    '+': 0,
    '-': 0,
    '*': 1,
    '/': 1
  };

  for(let i = 0; i < exp.length; i++) {
    var item = exp[i];
    // 如果是数字 则压入栈中
    if (!isNaN(item)) {
      postfix_list.push(item);
    } else if (item === '(') {
      // 如果碰到左括号则压入栈中
      stack.push(item);
    } else if(item === ')') {
      // 开始弹出符号栈，直到遇到 左括号
      while(stack.top() !== '(') {
        // 符号栈弹出 加入后缀字符串数组中
        postfix_list.push(stack.pop());
      }
      // 弹出左括号
      stack.pop();
    } else {
      // 是否为运算符，若栈顶运算符优先级大于等于当前运算符 则符号栈弹出栈顶符号 加入后缀字符串数组中
      if(EXP_LIST.includes(item) && EXP_GRADE[stack.top()] >= EXP_GRADE[item]) {
        postfix_list.push(stack.pop());
      }
      // 将当前运算符入栈
      stack.push(item);
    }
  }

  // for循环结束后, 栈里可能还有元素,都弹出放入到postfix_lst中
  while(!stack.isEmpty()) {
    postfix_list.push(stack.pop());
  }
  
  return postfix_list;
}

var exp1 = ['(', '1', '+', '(', '4', '+', '5', '+', '3', ')', '/', '4', '-', '3', ')', '+', '(', '6', '+', '8', ')', '*', '3'];
console.log('postfix1', infix_exp_2_postfix_exp(exp1)); // [ '1', '4', '5', '+', '3', '+', '+', '3', '-', '9', '8', '+', '+' ]
